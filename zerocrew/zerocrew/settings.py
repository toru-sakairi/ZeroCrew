"""
Django settings for zerocrew project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os  # osをインポート
from dotenv import load_dotenv  # dotenvをインポート

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# ▼▼▼ .envファイルを読み込む処理を追加 ▼▼▼
load_dotenv(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == 'True'

ALLOWED_HOSTS_STR = os.environ.get('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host.strip()
                 for host in ALLOWED_HOSTS_STR.split(',') if host.strip()]


# Application definition

STATIC_ROOT = BASE_DIR / 'staticfiles'

if DEBUG:
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        # 作成したアプリをここに追加
        'users.apps.UsersConfig',
        'projects.apps.ProjectsConfig',
        # タグをつける機能 django-taggit
        'taggit',
    ]
else:
    INSTALLED_APPS = [
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
        # 作成したアプリをここに追加
        'users.apps.UsersConfig',
        'projects.apps.ProjectsConfig',
        # タグをつける機能 django-taggit
        'taggit',
        'storages',
    ]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'zerocrew.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'zerocrew.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# 開発時
if DEBUG:
    DATABASES = {
        # postgresにしたからコメントアウト
        # 'default': {
        #    'ENGINE': 'django.db.backends.sqlite3',
        #    'NAME': BASE_DIR / 'db.sqlite3',
        # }
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'zerocrew_db',      # ステップ1で作成したデータベース名
            'USER': 'zerocrew_developer',     # ステップ1で作成したユーザー名
            'PASSWORD': os.environ.get('DATABASE_PASSWORD'),  # ステップ1で設定したパスワード
            'HOST': 'localhost',         # 自分のPCで動かしているのでlocalhost
            'PORT': '5432',              # PostgreSQLのデフォルトのポート番号
        }
    }
        
    STATIC_URL = 'static/'

    STATICFILES_DIRS = [
        BASE_DIR / 'static',
    ]
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'
# 本番環境の設定
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'zerocrew_db',
            'USER': 'zerocrew_admin',  # RDSのマスターユーザー名
            'PASSWORD': os.environ.get('DATABASE_ADMIN_PASSWORD'),
            'HOST': os.environ.get('DATABASE_HOST'),  # RDSのエンドポイント
            'PORT': '5432',
        }
    }
    # AWS設定
    AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = 'zerocrew-bucket-20250622'  # ステップ1で作成したバケット名
    AWS_S3_REGION_NAME = 'ap-northeast-1'  # 東京リージョン
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
    # S3においてのエラーより、ACLを設定しない
    AWS_DEFAULT_ACL = None
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',  # キャッシュの有効期限（秒）
    }

    STATIC_URL = 'static/'

    STATICFILES_DIRS = [
        BASE_DIR / 'static',
    ]
    MEDIA_URL = '/media/'
    MEDIA_ROOT = BASE_DIR / 'media'

    # 静的ファイル(CSS, JS) の設定
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
    STATICFILES_STORAGE = 'zerocrew.storages_conf.StaticStorage'  # ← ここを書き換える

    # メディアファイル(ユーザーがアップロードする画像) の設定
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    DEFAULT_FILE_STORAGE = 'zerocrew.storages_conf.MediaStorage'  # ← ここを書き換える


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LANGUAGE_CODE = 'ja'

TIME_ZONE = 'Asia/Tokyo'

# ログイン/ログアウトに関するURL設定
LOGIN_URL = 'users:login'
LOGIN_REDIRECT_URL = 'projects:home'
LOGOUT_REDIRECT_URL = 'users:login'
